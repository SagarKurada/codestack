1. Rechanging/Updating the columns: 
   Using UPDATE and CASE...WHEN
  a)update salary
    set sex=
    case
    when sex='m' then 'f'
    when sex='f' then 'm'
    end; 
  b)update salary 
    set sex = 
    IF (sex = "m", "f", "m");
    
2. Reformat Department Table : Rows to Columns : Pivot 
  select id,
    sum(IF(month = 'Jan', revenue, NULL)) as Jan_Revenue,
    sum(IF(month = 'Feb', revenue, NULL)) as Feb_Revenue,
    sum(IF(month = 'Mar', revenue, NULL)) as Mar_Revenue,
    sum(IF(month = 'Apr', revenue, NULL)) as Apr_Revenue,
    sum(IF(month = 'May', revenue, NULL)) as May_Revenue,
    sum(IF(month = 'Jun', revenue, NULL)) as Jun_Revenue,
    sum(IF(month = 'Jul', revenue, NULL)) as Jul_Revenue,
    sum(IF(month = 'Aug', revenue, NULL)) as Aug_Revenue,
    sum(IF(month = 'Sep', revenue, NULL)) as Sep_Revenue,
    sum(IF(month = 'Oct', revenue, NULL)) as Oct_Revenue,
    sum(IF(month = 'Nov', revenue, NULL)) as Nov_Revenue,
    sum(IF(month = 'Dec', revenue, NULL)) as Dec_Revenue
from Department
group by id
order by id

3. Having: we use having for group by  to keep a condition after group by 
  select email from person group by email having count(email)>1

4. Partition

 
5. Creating a new colum 
   select 
ROUND(AVG(
    case 
    when d.order_date = d.customer_pref_delivery_date then 1 else 0 
    end) 
      * 100,2) immediate_percentage
from Delivery d


6. count(*)>=3
7. Filtering group-by function:
   a) SELECT seller_id
      from sales
      group by seller_id 
      having SUM(price) = 
      (select MAX(total_price)  from (select SUM(price)  total_price 
           from sales
           group by seller_id)tab); 
   b) SELECT
          customer_number
      FROM
          orders
      GROUP BY customer_number
      ORDER BY COUNT(*) DESC
      LIMIT 1
   c) select customer_number from orders 
      group by customer_number
      having count(customer_number) >= all 
      (select count(customer_number) from orders group by customer_number)
      ;
       
8. 3 conditions: when-then, if-else
         select  country_name,
      (case 
          when avg(weather_state) >=25 then 'Hot' 
          when avg(weather_state)<=15 then "Cold"
          else "Warm"
          end) weather_type

      from 
      countries a, weather b
      where
      a.country_id=b.country_id and
      day between '2019-11-01' and '2019-11-31'
      group by 
      country_name
      ;
9. From, Where, Group by
10. Inner Join:
    SELECT StudentCourse.COURSE_ID, Student.NAME, Student.AGE FROM Student
   INNER JOIN StudentCourse
   ON Student.ROLL_NO = StudentCourse.ROLL_NO;

   Left Join:
     SELECT table1.column1,table1.column2,table2.column1,....
   FROM table1 
   LEFT JOIN table2
   ON table1.matching_column = table2.matching_column;

Right Join:
   SELECT table1.column1,table1.column2,table2.column1,....
   FROM table1 
   RIGHT JOIN table2
   ON table1.matching_column = table2.matching_column;
11. Lead/Lag - subsequent, previous row data along with row data
   Lead(Column Name, offset - number of rows, default value- last) over(order by ...)
12. EXISTS - makes query faster,clearee
  Execute outer query only if we have inner query 
13. Select top 1 salary from ...;
14. CTE Function:
   https://www.sqlservertutorial.net/sql-server-basics/sql-server-cte/
15. 
