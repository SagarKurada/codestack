1. Rechanging/Updating the columns: 
   Using UPDATE and CASE...WHEN
  a)update salary
    set sex=
    case
    when sex='m' then 'f'
    when sex='f' then 'm'
    end; 
  b)update salary 
    set sex = 
    IF (sex = "m", "f", "m");
  c) ifnull(case
    when state='aprroved' then 1
    when state='declined' then 0
    end),0)aprroved_count
    
    
2. Reformat Department Table : Rows to Columns : Pivot 
  select id,
    sum(IF(month = 'Jan', revenue, NULL)) as Jan_Revenue,
    sum(IF(month = 'Feb', revenue, NULL)) as Feb_Revenue,
    sum(IF(month = 'Mar', revenue, NULL)) as Mar_Revenue,
    sum(IF(month = 'Apr', revenue, NULL)) as Apr_Revenue,
    sum(IF(month = 'May', revenue, NULL)) as May_Revenue,
    sum(IF(month = 'Jun', revenue, NULL)) as Jun_Revenue,
    sum(IF(month = 'Jul', revenue, NULL)) as Jul_Revenue,
    sum(IF(month = 'Aug', revenue, NULL)) as Aug_Revenue,
    sum(IF(month = 'Sep', revenue, NULL)) as Sep_Revenue,
    sum(IF(month = 'Oct', revenue, NULL)) as Oct_Revenue,
    sum(IF(month = 'Nov', revenue, NULL)) as Nov_Revenue,
    sum(IF(month = 'Dec', revenue, NULL)) as Dec_Revenue
from Department
group by id
order by id

3. Having: we use having for group by  to keep a condition after group by 
  select email from person group by email having count(email)>1

4. Partition

 
5. Creating a new colum 
   select 
ROUND(AVG(
    case 
    when d.order_date = d.customer_pref_delivery_date then 1 else 0 
    end) 
      * 100,2) immediate_percentage
from Delivery d


6. count(*)>=3
7. Filtering group-by function:
   a) SELECT seller_id
      from sales
      group by seller_id 
      having SUM(price) = 
      (select MAX(total_price)  from (select SUM(price)  total_price 
           from sales
           group by seller_id)tab); 
   b) SELECT
          customer_number
      FROM
          orders
      GROUP BY customer_number
      ORDER BY COUNT(*) DESC
      LIMIT 1
   c) select customer_number from orders 
      group by customer_number
      having count(customer_number) >= all 
      (select count(customer_number) from orders group by customer_number)
      ;
       
8. 3 conditions: when-then, if-else
         select  country_name,
      (case 
          when avg(weather_state) >=25 then 'Hot' 
          when avg(weather_state)<=15 then "Cold"
          else "Warm"
          end) weather_type

      from 
      countries a, weather b
      where
      a.country_id=b.country_id and
      day between '2019-11-01' and '2019-11-31'
      group by 
      country_name
      ;
9. From, Where, Group by
10. Inner Join:
    SELECT StudentCourse.COURSE_ID, Student.NAME, Student.AGE FROM Student
   INNER JOIN StudentCourse
   ON Student.ROLL_NO = StudentCourse.ROLL_NO;

   Left Join:
     SELECT table1.column1,table1.column2,table2.column1,....
   FROM table1 
   LEFT JOIN table2
   ON table1.matching_column = table2.matching_column;

Right Join:
   SELECT table1.column1,table1.column2,table2.column1,....
   FROM table1 
   RIGHT JOIN table2
   ON table1.matching_column = table2.matching_column;
11. Lead/Lag - subsequent, previous row data along with row data
   Lead(Column Name, offset - number of rows, default value- last) over(order by ...)
12. EXISTS - makes query faster,clearee
  Execute outer query only if we have inner query 
13. Select top 1 salary from ...;
14. CTE Function:
   https://www.sqlservertutorial.net/sql-server-basics/sql-server-cte/
15. Running Total
 
 select gender, day, 
sum(score_points) over (partition by gender order by day) as total
from scores; 
16. Find the Start and End Number of Continuous Ranges

select min(log_id) START_ID, max(log_id)END_ID from 
(SELECT log_id, ROW_NUMBER() OVER(ORDER BY log_id) as num
FROM Logs) a
group by log_id-num; 
17. date_format(trans_date,'%Y-%m') as month
18. Using group-by in having condition:
      select customer_id from customer
   group by customer_id
   having count(distinct  product_key) = (select count(*) from product); 

19. Minus:
    select distinct(page_id)recommended_page from likes
where user_id in 
(select user2_id from friendship where user1_id =1
union
select user1_id from friendship where user2_id=1)
and 
page_id NOT IN (SELECT page_id FROM Likes WHERE user_id=1);

20. Movigng averages
select
visited_on,
amount,
round(1.0*amount/7, 2) as average_amount 

from
(
select
visited_on,
sum(amount_day) over (order by visited_on rows between 6 preceding and current row) as amount,
rank() over (order by visited_on) as rk
    from 
    (

    select
    visited_on,
    sum(amount) as amount_day
    from customer
    group by visited_on
    ) tmp
) tmp2
    
    where rk >= 7
;

21. Editing the columns
    Select
(case
when id%2=0 then id-1
when id%2=1 and id<(select max(id) from seat) then id+1
else id
end )as id
, student
from seat
order by id asc ;

22. Time period range:
    min_date between dateadd(day, -90, '2019-06-30') and '2019-06-30'

23. For Loop
   SELECT 0 as transactions_count, max(transactions_count) as temp
    FROM c
	UNION ALL
    SELECT transactions_count + 1 , temp 
	FROM d
    where transactions_count < temp
 24.  RANK() OVER(PARTITION BY DepartmentId ORDER BY Salary DESC) AS rank
      DENSE_RANK() OVER(PARTITION BY DepartmentId ORDER BY Salary DESC) AS rank
      Use dense_rank() instead of rank() because using rank() does not account for ties.
25. Lag and lEAD
     select distinct num from 
(
    select Num, LEAD(Num, 1) over(order by Id) as next_num, LEAD(Num, 2) over(order by Id) as next_num_2
from Logs) p
where num=next_num and num=next_num_2; 

Instead of using lead and lag, using id's

 SELECT DISTINCT l1.num AS ConsecutiveNums
FROM logs l1, logs l2, logs l3
WHERE l3.id = l2.id +1 AND l3.id = l1.id +2
AND l1.num = l2.num and l2.num = l3.num

26. Common Table Expression :
 WITH CTE AS (
select delivery.*, row_number()over(partition by customer_id order by order_date asc) as order_time from Delivery)

27. Median
  with cte_1 as
(
    select id, company , 
salary,
row_number()over(partition by company order by salary asc) as row,
count(Id) over(partition by Company) count
from employee)

select id, company, salary from cte_1
where row between
count/2.0 and count/2.0 +1;

28. Left Join and Right Join cannot be done in CTE
29. Dated Diff : 
     where datediff('2019-06-23',b.available_from)>30
     
30. Not in Function:
    select id, name from Students
   where department_id not in (select distinct id from Departments)
      
31. Cast: Csting the fucntion into integer, float
   CAST(SUM(A.units*B.price) AS FLOAT
32. Getting unique rows.
   distinct(row1)
33. Creating a new column based on grouping 
	    WITH cte_tab as(
	SELECT question_id, 
	(SUM(case when answer_id is not null then 1 else 0 end)*100)/count(*) as answer_rate
	FROM 
	survey_log
	GROUP BY question_id
	)
	SELECT TOP 1 question_id as survey_log FROM cte_tab ORDER BY answer_rate desc;
34. Deleting duplicate rows:
    	DELETE p1
	FROM Person p1, Person p2
	WHERE p1.Email = p2.Email AND
	p1.Id > p2.Id;
